{"version":3,"sources":["utils/arrayGenerator.js","utils/animations.js","components/Block.jsx","components/Description.jsx","components/Visualizer.jsx","components/Header.jsx","components/Footer.jsx","App.js","reportWebVitals.js","index.js"],"names":["arrayGenerator","length","viewPort","size","array","Math","round","random","i","value","push","bubbleSortAnimation","a","sorted","j","k","document","getElementById","style","background","Promise","resolve","setTimeout","temp2","height","temp","selectionSortAnimation","m","min","insertionSortAnimation","key","hoarePartition","l","r","delay","blocks","querySelectorAll","pivot","Number","split","backgroundColor","temp1","quickSortAnimation","pivot_idx","Block","width","margin","pos","onClick","className","marginLeft","id","Description","name","description","algorithm","code","subAlgorithm","map","heading","step","language","gruvboxDark","Visualizer","modes","margin2","setBubbleSortMode","setInsertionSortMode","setSelectionSortMode","setQuickSortMode","setArray","disabled","bubbleSortMode","insertionSortMode","selectionSortMode","quickSortMode","x","Header","device","Navbar","expand","Brand","color","marginRight","Toggle","aria-controls","Collapse","Nav","NavItem","Footer","padding","App","useState","window","innerWidth","windowSize","setWindowSize","addEventListener","isMobile","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ea0a9855.chunk.js","sourcesContent":["export const arrayGenerator = (length, viewPort) => {\n  if (viewPort === 'laptop') {\n    let size\n    const array = []\n    if (length) size = 10\n    else size = Math.round(Math.random() * 12) * 10\n    if (size === 0) {\n      size = 10\n    }\n    for (let i = 0; i < size; i++) {\n      let value = Math.round(Math.random() * 375)\n      if (value === 0) array.push(10)\n      else array.push(value)\n    }\n    return array\n  } else {\n    let size\n    const array = []\n    if (length) size = 10\n    else size = Math.round(Math.random() * 7) * 10\n    if (size === 0) {\n      size = 10\n    }\n    for (let i = 0; i < size; i++) {\n      let value = Math.round(Math.random() * 275)\n      if (value === 0) array.push(10)\n      else array.push(value)\n    }\n    return array\n  }\n}\n","export const bubbleSortAnimation = async (array) => {\n  let sorted = true\n  for (let i = 0; i < array.length - 1; i++) {\n    if (array[i] > array[i + 1]) {\n      sorted = false\n      break\n    }\n  }\n  if (!sorted) {\n    for (let i = 0; i < array.length - 1; i++) {\n      for (let j = 0; j < array.length; j++) {\n        for (let k = 0; k < array.length; k++) {\n          document.getElementById(`${k}`).style.background = '#a7d129'\n        }\n        document.getElementById(`${j}`).style.background = 'red'\n        if (array[j] > array[j + 1]) {\n          await new Promise((resolve) =>\n            setTimeout(() => {\n              resolve()\n            }, 100)\n          )\n          const temp2 = document.getElementById(`${j}`).style.height\n          document.getElementById(`${j}`).style.height =\n            document.getElementById(`${j + 1}`).style.height\n          document.getElementById(`${j + 1}`).style.height = temp2\n          document.getElementById(`${j + 1}`).style.background = 'red'\n          const temp = array[j]\n          array[j] = array[j + 1]\n          array[j + 1] = temp\n        }\n      }\n    }\n    for (let i = 0; i < array.length; i++) {\n      document.getElementById(`${i}`).style.background = '#a7d129'\n    }\n  }\n  return true\n}\n\nexport const selectionSortAnimation = async (array) => {\n  let sorted = true\n  for (let i = 0; i < array.length - 1; i++) {\n    if (array[i] > array[i + 1]) {\n      sorted = false\n      break\n    }\n  }\n  if (!sorted) {\n    for (let i = 0; i < array.length; i++) {\n      for (let m = 0; m < array.length; m++) {\n        document.getElementById(`${m}`).style.background = '#a7d129'\n      }\n      var min = i\n      for (let j = i + 1; j < array.length; j++) {\n        await new Promise((resolve) =>\n          setTimeout(() => {\n            resolve()\n          }, 50)\n        )\n        document.getElementById(`${j}`).style.background = 'magenta'\n        if (array[j] < array[min]) {\n          min = j\n          document.getElementById(`${min}`).style.background = 'red'\n          for (let k = i + 1; k < j; k++) {\n            document.getElementById(`${k}`).style.background = '#a7d129'\n          }\n        }\n      }\n\n      await new Promise((resolve) =>\n        setTimeout(() => {\n          resolve()\n        }, 200)\n      )\n      const temp = document.getElementById(`${min}`).style.height\n      document.getElementById(`${min}`).style.height = document.getElementById(\n        `${i}`\n      ).style.height\n      document.getElementById(`${i}`).style.height = temp\n      document.getElementById(`${i}`).style.background = 'yellow'\n      await new Promise((resolve) =>\n        setTimeout(() => {\n          resolve()\n        }, 700)\n      )\n      document.getElementById(`${i}`).style.background = '#a7d129'\n      document.getElementById(`${min}`).style.background = '#a7d129'\n      const temp2 = array[i]\n      array[i] = array[min]\n      array[min] = temp2\n    }\n    for (let i = 0; i < array.length; i++) {\n      document.getElementById(`${i}`).style.background = '#a7d129'\n    }\n  }\n  return true\n}\n\nexport const insertionSortAnimation = async (array) => {\n  let sorted = true\n  for (let i = 0; i < array.length - 1; i++) {\n    if (array[i] > array[i + 1]) {\n      sorted = false\n      break\n    }\n  }\n  if (!sorted) {\n    for (let i = 1; i < array.length; i++) {\n      for (let k = 0; k < array.length; k++) {\n        document.getElementById(`${k}`).style.background = '#a7d129'\n      }\n      let key = array[i]\n      document.getElementById(`${i}`).style.background = 'red'\n      let j = i - 1\n      while (j >= 0 && key <= array[j]) {\n        document.getElementById(`${j}`).style.background = 'yellow'\n        await new Promise((resolve) => {\n          setTimeout(() => {\n            resolve()\n          }, 200)\n        })\n        document.getElementById(`${j + 1}`).style.background = '#a7d129'\n        document.getElementById(`${j + 1}`).style.height = `${array[j]}px`\n        array[j + 1] = array[j]\n        j -= 1\n      }\n      document.getElementById(`${j + 1}`).style.height = `${key}px`\n      array[j + 1] = key\n    }\n    for (let i = 0; i < array.length; i++) {\n      document.getElementById(`${i}`).style.background = '#a7d129'\n    }\n  }\n  return true\n}\nconst hoarePartition = async (l, r, array, delay = 200) => {\n  var blocks = document.querySelectorAll('.block')\n  var pivot = Number(blocks[l].style.height.split('p')[0])\n\n  var i = l - 1\n  var j = r + 1\n\n  while (true) {\n    // Find leftmost element greater than\n    // or equal to pivot\n    do {\n      i++\n      if (i - 1 >= l) blocks[i - 1].style.backgroundColor = 'red'\n      blocks[i].style.backgroundColor = 'yellow'\n      //To wait for 700 milliseconds\n      await new Promise((resolve) =>\n        setTimeout(() => {\n          resolve()\n        }, delay)\n      )\n    } while (Number(blocks[i].style.height.split('p')[0]) < pivot)\n\n    // Find rightmost element smaller than\n    // or equal to pivot\n    do {\n      j--\n      if (j + 1 <= r) blocks[j + 1].style.backgroundColor = 'magenta'\n      blocks[j].style.backgroundColor = 'yellow'\n      //To wait for 700 milliseconds\n      await new Promise((resolve) =>\n        setTimeout(() => {\n          resolve()\n        }, delay)\n      )\n    } while (Number(blocks[j].style.height.split('p')[0]) > pivot)\n\n    // If two pointers met.\n    if (i >= j) {\n      for (var k = 0; k < r + 1; k++)\n        blocks[k].style.backgroundColor = '#a7d129'\n      return j\n    }\n\n    //swapping ith and jth element\n    var temp1 = blocks[i].style.height\n    var temp2 = array[i]\n    blocks[i].style.height = blocks[j].style.height\n    array[i] = array[j]\n    blocks[j].style.height = temp1\n    array[j] = temp2\n    //To wait for 700 milliseconds\n    await new Promise((resolve) =>\n      setTimeout(() => {\n        resolve()\n      }, delay)\n    )\n  }\n}\n\nexport const quickSortAnimation = async (l, r, array, delay = 100) => {\n  const blocks = document.querySelectorAll('.block')\n  let sorted = true\n  for (let i = 0; i < blocks.length - 1; i++) {\n    if (\n      Number(blocks[i].style.height.split('p')[0]) >\n      Number(blocks[i + 1].style.height.split('p')[0])\n    ) {\n      sorted = false\n      break\n    }\n  }\n\n  // QuickSort Algorithm\n  if (!sorted)\n    if (l < r) {\n      //Storing the index of pivot element after partition\n      var pivot_idx = await hoarePartition(l, r, array)\n      //Recursively calling quicksort for left partition\n      await quickSortAnimation(l, pivot_idx, array)\n      //Recursively calling quicksort for right partition\n      await quickSortAnimation(pivot_idx + 1, r, array)\n    }\n  return true\n}\n","const Block = ({ height, width, margin, pos, onClick }) => {\n  return (\n    <div\n      className='block'\n      style={{\n        height: `${height}px`,\n        marginLeft: `${margin}px`,\n        width: `${width}px`,\n      }}\n      id={`${pos}`}\n      onClick={onClick}\n    ></div>\n  )\n}\n\nexport default Block\n","import SyntaxHighlighter from 'react-syntax-highlighter'\nimport { gruvboxDark } from 'react-syntax-highlighter/dist/esm/styles/hljs'\n\nconst Description = ({ name, description, algorithm, code, subAlgorithm }) => {\n  return (\n    <div className='description'>\n      <h2>{name}</h2>\n      <p>{description}</p>\n      <h3>Algorithm</h3>\n      {subAlgorithm &&\n        subAlgorithm.map(({ heading, algorithm }) => {\n          return (\n            <>\n              {' '}\n              <h4>{heading}</h4>{' '}\n              <ol>\n                {algorithm.map((step, i) => (\n                  <li key={`${i}`}>{step}</li>\n                ))}\n              </ol>\n            </>\n          )\n        })}\n      <ol>\n        {algorithm.map((step, i) => (\n          <li key={`${i}`}>{step}</li>\n        ))}\n      </ol>\n      <h3>Source Code</h3>\n      <div className='code-container'>\n        <SyntaxHighlighter language='javascript' style={gruvboxDark}>\n          {code}\n        </SyntaxHighlighter>\n      </div>\n    </div>\n  )\n}\n\nexport default Description\n","import { arrayGenerator } from '../utils/arrayGenerator'\nimport {\n  bubbleSortAnimation,\n  insertionSortAnimation,\n  quickSortAnimation,\n  selectionSortAnimation,\n} from '../utils/animations'\nimport Block from './Block'\nimport Description from './Description'\nconst Visualizer = ({ viewPort, array, onClick, modes }) => {\n  const mobileArraySizes = [10, 20, 30, 40, 50, 60, 70]\n  const laptopArraySizes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n  var margin = 200\n  var margin2 = 10\n  return (\n    <div>\n      <div className='visualizer-container '>\n        {viewPort === 'laptop' && (\n          <>\n            <button\n              className='button'\n              onClick={() => {\n                onClick.setBubbleSortMode(0)\n                onClick.setInsertionSortMode(0)\n                onClick.setSelectionSortMode(0)\n                onClick.setQuickSortMode(0)\n                onClick.setArray(arrayGenerator(false, viewPort))\n              }}\n              disabled={\n                modes.bubbleSortMode ||\n                modes.insertionSortMode ||\n                modes.selectionSortMode ||\n                modes.quickSortMode\n                  ? true\n                  : false\n              }\n            >\n              New Array\n            </button>\n            <button\n              className='button'\n              onClick={async () => {\n                onClick.setBubbleSortMode(1)\n                onClick.setInsertionSortMode(0)\n                onClick.setSelectionSortMode(0)\n                onClick.setQuickSortMode(0)\n                const completed = await bubbleSortAnimation(array)\n                if (completed) onClick.setBubbleSortMode(0)\n              }}\n              disabled={\n                modes.insertionSortMode ||\n                modes.selectionSortMode ||\n                modes.bubbleSortMode ||\n                modes.quickSortMode\n                  ? true\n                  : false\n              }\n            >\n              Bubble Sort\n            </button>\n            <button\n              className='button'\n              onClick={async () => {\n                onClick.setInsertionSortMode(1)\n                onClick.setSelectionSortMode(0)\n                onClick.setBubbleSortMode(0)\n                onClick.setQuickSortMode(0)\n                const completed = await insertionSortAnimation(array)\n                if (completed) onClick.setInsertionSortMode(0)\n              }}\n              disabled={\n                modes.bubbleSortMode ||\n                modes.selectionSortMode ||\n                modes.insertionSortMode ||\n                modes.quickSortMode\n                  ? true\n                  : false\n              }\n            >\n              Insertion Sort\n            </button>\n            <button\n              className='button'\n              onClick={async () => {\n                onClick.setSelectionSortMode(1)\n                onClick.setInsertionSortMode(0)\n                onClick.setBubbleSortMode(0)\n                onClick.setQuickSortMode(0)\n                const completed = await selectionSortAnimation(array)\n                if (completed) onClick.setSelectionSortMode(0)\n              }}\n              disabled={\n                modes.insertionSortMode ||\n                modes.bubbleSortMode ||\n                modes.selectionSortMode ||\n                modes.quickSortMode\n                  ? true\n                  : false\n              }\n            >\n              Selection Sort\n            </button>\n            <button\n              className='button'\n              onClick={async () => {\n                onClick.setQuickSortMode(1)\n                onClick.setBubbleSortMode(0)\n                onClick.setInsertionSortMode(0)\n                onClick.setSelectionSortMode(0)\n                const completed = await quickSortAnimation(\n                  0,\n                  array.length - 1,\n                  array\n                )\n                if (completed) onClick.setQuickSortMode(0)\n              }}\n              disabled={\n                modes.insertionSortMode ||\n                modes.bubbleSortMode ||\n                modes.selectionSortMode ||\n                modes.quickSortMode\n                  ? true\n                  : false\n              }\n            >\n              Quick Sort\n            </button>\n          </>\n        )}\n        {viewPort === 'laptop' &&\n          laptopArraySizes.map((size) => {\n            if (array.length === size) {\n              return array.map((value, i) => {\n                const x = 600 / size\n                margin += x\n                if (i === 0) {\n                  margin = 200\n                  return <Block height={value} width={x - 2} key={i} pos={i} />\n                } else\n                  return (\n                    <Block\n                      height={value}\n                      width={x - 2}\n                      margin={margin}\n                      key={i}\n                      pos={i}\n                    />\n                  )\n              })\n            } else return null\n          })}\n        {viewPort === 'mobile' &&\n          mobileArraySizes.map((size) => {\n            if (array.length === size) {\n              return array.map((value, i) => {\n                const x = 280 / size\n                margin2 += x\n                if (i === 0) {\n                  margin2 = 10\n                  return <Block height={value} width={x - 2} key={i} pos={i} />\n                } else\n                  return (\n                    <Block\n                      height={value}\n                      width={x - 2}\n                      margin={margin2}\n                      key={i}\n                      pos={i}\n                    />\n                  )\n              })\n            } else return null\n          })}\n      </div>\n      {modes.bubbleSortMode && (\n        <div className='description-container'>\n          <Description\n            key='bubbleSort'\n            name='Bubble Sort'\n            description='Bubble sort is a simple sorting algorithm. This sorting algorithm is comparison-based algorithm in which each pair of adjacent elements is compared and the elements are swapped if they are not in order. This algorithm is not suitable for large data sets as its average and worst case complexity are of Ο(n2) where n is the number of items.'\n            algorithm={[\n              'In an unsorted array of 5 elements, start with the first two elements and sort them in ascending order. (Compare the element to check which one is greater).',\n              'Compare the second and third element to check which one is greater, and sort them in ascending order.',\n              'Compare the third and fourth element to check which one is greater, and sort them in ascending order.',\n              'Compare the fourth and fifth element to check which one is greater, and sort them in ascending order.',\n              'Repeat steps 1–5 until no more swaps are required.',\n            ]}\n            code={\n              'function bubbleSort(array) {\\n let swapped;\\n do {\\n swapped = false;\\n  for(let i = 0; i < array.length; i++) {\\n   if(array[i] && array[i + 1] && array[i] > array[i + 1]) {\\n    [array[i], array[i + 1]] = [array[i + 1], array[i]];\\n    swapped = true;\\n   }\\n  }\\n } while(swapped);\\n return array;\\n}'\n            }\n          />\n        </div>\n      )}\n      {modes.selectionSortMode && (\n        <div className='description-container'>\n          <Description\n            key='selectionSort'\n            name='Selection Sort'\n            description='Selection sort is a simple sorting algorithm. This sorting algorithm is an in-place comparison-based algorithm in which the list is divided into two parts, the sorted part at the left end and the unsorted part at the right end.Initially, the sorted part is empty and the unsorted part is the entire list.The smallest element is selected from the unsorted array and swapped with the leftmost element, and that element becomes a part of the sorted array. This process continues moving unsorted array boundary by one element to the right.This algorithm is not suitable for large data sets as its average and worst case complexities are of Ο(n2), where n is the number of items.'\n            algorithm={[\n              'Set MIN to location 0',\n              'Search the minimum element in the list',\n              'Swap with value at location MIN',\n              'Increment MIN to point to next element',\n              'Repeat until list is sorted',\n            ]}\n            code={\n              'function selectionSort(arr,  n){\\n var i, j, min_idx,temp;\\n for (i = 0; i < n-1; i++){\\n  min_idx = i;\\n  for (j = i + 1; j < n; j++)\\n   if (arr[j] < arr[min_idx])\\n    min_idx = j;\\n  temp = arr[min];\\n  arr[min] = arr[i];\\n  arr[i] = temp;\\n }\\n}'\n            }\n          />\n        </div>\n      )}\n      {modes.insertionSortMode && (\n        <div className='description-container'>\n          <Description\n            key='insertionSort'\n            name='Insertion Sort'\n            description='This is an in-place comparison-based sorting algorithm. Here, a sub-list is maintained which is always sorted. For example, the lower part of an array is maintained to be sorted. An element which is to be inserted in this sorted sub-list, has to find its appropriate place and then it has to be inserted there. Hence the name, insertion sort.The array is searched sequentially and unsorted items are moved and inserted into the sorted sub-list (in the same array). This algorithm is not suitable for large data sets as its average and worst case complexity are of Ο(n2), where n is the number of items.'\n            algorithm={[\n              'If it is the first element, it is already sorted. return 1;',\n              'Pick next element',\n              'Compare with all elements in the sorted sub-list',\n              'Shift all the elements in the sorted sub-list that is greater than the value to be sorted',\n              'Insert the value',\n              'Repeat until list is sorted',\n            ]}\n            code={\n              'function insertionSort(arr, n) {\\n let i, key, j;\\n for (i = 1; i < n; i++) {\\n  key = arr[i];\\n  j = i - 1;\\n  while (j >= 0 && arr[j] > key) {\\n   arr[j + 1] = arr[j];\\n   j = j - 1;\\n  }\\n  arr[j + 1] = key;\\n }\\n}'\n            }\n          />\n        </div>\n      )}\n      {modes.quickSortMode && (\n        <div\n          className='description-container'\n          style={\n            viewPort === 'laptop'\n              ? { height: '1500px' }\n              : { height: 'fit-content' }\n          }\n        >\n          <Description\n            key='quickSort'\n            name='Quick Sort'\n            description='Quick sort is a highly efficient sorting algorithm and is based on partitioning of array of data into smaller arrays. A large array is partitioned into two arrays one of which holds values smaller than the specified value, say pivot, based on which the partition is made and another array holds values greater than the pivot value.Quicksort partitions an array and then calls itself recursively twice to sort the two resulting subarrays. This algorithm is quite efficient for large-sized data sets as its average and worst-case complexity are O(n2), respectively.'\n            subAlgorithm={[\n              {\n                heading: 'Partition Algorithm',\n                algorithm: [\n                  'Choose the highest index value has pivot',\n                  'Take two variables to point left and right of the list excluding pivot',\n                  'left points to the low index',\n                  'right points to the high',\n                  'while value at left is less than pivot move right',\n                  'while value at right is greater than pivot move left',\n                  'if both step 5 and step 6 does not match swap left and right',\n                  'if left ≥ right, the point where they met is new pivot',\n                ],\n              },\n              {\n                heading: 'Quick Sort Algorithm',\n                algorithm: [\n                  'Make the right-most index value pivot',\n                  'partition the array using pivot value',\n                  'quicksort left partition recursively',\n                  'quicksort right partition recursively',\n                ],\n              },\n            ]}\n            algorithm={[]}\n            code={\n              ' // QuickSort Function \\n function quickSort(arr, left, right) {\\n if (left < right) {\\n  const index = partition(arr, left, right);\\n  quickSort(arr, left, index);\\n  quickSort(arr, index + 1, right);\\n  }\\n }\\n\\n // Partition Function \\n function partition(arr, left, right) {\\n  const pivot = arr[Math.floor((left+right)/2)];\\n  while (true) {\\n   while (arr[left] < pivot) {\\n    left++;\\n   }\\n   while (arr[right] > pivot) {\\n    right--;\\n   }\\n   if (left >= right) {\\n    return right;\\n   }\\n   swap(arr, left, right);\\n  }\\n }\\n\\n // Swap Function \\n function swap(arr, i, j) {\\n  const tmp = arr[i];\\n  arr[i] = arr[j];\\n  arr[j] = tmp;\\n }'\n            }\n          />\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Visualizer\n","import { Nav, Navbar, NavItem } from 'react-bootstrap'\nimport { arrayGenerator } from '../utils/arrayGenerator'\n\nconst Header = ({ device, onClick, array, modes }) => {\n  return (\n    <header>\n      <Navbar expand='sm' className='navbar'>\n        <Navbar.Brand className='font'>\n          <i\n            className='far fa-2x fa-chart-bar d-inline-block align-top'\n            style={{\n              color: '#a7d129',\n              marginLeft: '10px',\n              marginRight: '5px',\n            }}\n          ></i>\n          SortAlgo Visualizer\n        </Navbar.Brand>\n        <Navbar.Toggle\n          aria-controls='basic-navbar-nav'\n          style={{\n            backgroundColor: '#a7d129',\n            marginRight: '5px',\n          }}\n        />\n        {device === 'mobile' && (\n          <Navbar.Collapse id='basic-navbar-nav'>\n            <Nav className='mr-auto'>\n              <NavItem\n                className='font'\n                onClick={() => {\n                  if (\n                    modes.bubbleSortMode ||\n                    modes.insertionSortMode ||\n                    modes.selectionSortMode ||\n                    modes.quickSortMode\n                  )\n                    return null\n                  else {\n                    onClick.setBubbleSortMode(0)\n                    onClick.setInsertionSortMode(0)\n                    onClick.setSelectionSortMode(0)\n                    onClick.setQuickSortMode(0)\n                    onClick.setArray(arrayGenerator(false, 'mobile'))\n                  }\n                }}\n              >\n                New Array\n              </NavItem>\n              <NavItem\n                className='font'\n                onClick={async () => {\n                  if (\n                    modes.insertionSortMode ||\n                    modes.selectionSortMode ||\n                    modes.bubbleSortMode ||\n                    modes.quickSortMode\n                  )\n                    return null\n                  else {\n                    onClick.setBubbleSortMode(1)\n                    onClick.setInsertionSortMode(0)\n                    onClick.setSelectionSortMode(0)\n                    onClick.setQuickSortMode(0)\n                    const completed = await onClick.bubbleSortAnimation(array)\n                    if (completed) onClick.setBubbleSortMode(0)\n                  }\n                }}\n              >\n                Bubble Sort\n              </NavItem>\n              <NavItem\n                className='font'\n                onClick={async () => {\n                  if (\n                    modes.bubbleSortMode ||\n                    modes.selectionSortMode ||\n                    modes.insertionSortMode ||\n                    modes.quickSortMode\n                  )\n                    return null\n                  else {\n                    onClick.setInsertionSortMode(1)\n                    onClick.setBubbleSortMode(0)\n                    onClick.setSelectionSortMode(0)\n                    onClick.setQuickSortMode(0)\n                    const completed = await onClick.insertionSortAnimation(\n                      array\n                    )\n                    if (completed) onClick.setInsertionSortMode(0)\n                  }\n                }}\n              >\n                Insertion Sort\n              </NavItem>\n              <NavItem\n                className='font'\n                onClick={async () => {\n                  if (\n                    modes.bubbleSortMode ||\n                    modes.insertionSortMode ||\n                    modes.selectionSortMode ||\n                    modes.quickSortMode\n                  )\n                    return null\n                  else {\n                    onClick.setSelectionSortMode(1)\n                    onClick.setBubbleSortMode(0)\n                    onClick.setInsertionSortMode(0)\n                    onClick.setQuickSortMode(0)\n                    const completed = await onClick.selectionSortAnimation(\n                      array\n                    )\n                    if (completed) onClick.setSelectionSortMode(0)\n                  }\n                }}\n              >\n                Selection Sort\n              </NavItem>\n              <NavItem\n                className='font'\n                onClick={async () => {\n                  if (\n                    modes.bubbleSortMode ||\n                    modes.insertionSortMode ||\n                    modes.selectionSortMode ||\n                    modes.quickSortMode\n                  )\n                    return null\n                  else {\n                    onClick.setQuickSortMode(1)\n                    onClick.setSelectionSortMode(0)\n                    onClick.setBubbleSortMode(0)\n                    onClick.setInsertionSortMode(0)\n                    const completed = await onClick.quickSortAnimation(\n                      0,\n                      array.length - 1,\n                      array\n                    )\n                    if (completed) onClick.setQuickSortMode(0)\n                  }\n                }}\n              >\n                Quick Sort\n              </NavItem>\n            </Nav>\n          </Navbar.Collapse>\n        )}\n      </Navbar>\n    </header>\n  )\n}\n\nexport default Header\n","const Footer = () => {\n  return (\n    <footer className='text-center' style={{ color: '#a7d129', padding: '0' }}>\n      <p>&copy; dilnavascp </p>\n    </footer>\n  )\n}\n\nexport default Footer\n","import Visualizer from './components/Visualizer'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport { useState } from 'react'\nimport { arrayGenerator } from './utils/arrayGenerator'\nimport {\n  bubbleSortAnimation,\n  selectionSortAnimation,\n  insertionSortAnimation,\n  quickSortAnimation,\n} from './utils/animations'\nconst App = () => {\n  const [windowSize, setWindowSize] = useState(window.innerWidth)\n  const handleWindowSizeChange = () => {\n    setWindowSize(window.innerWidth)\n  }\n  window.addEventListener('resize', () => {\n    handleWindowSizeChange()\n  })\n  const isMobile = windowSize <= 500\n  const viewPort = isMobile ? 'mobile' : 'laptop'\n  const [array, setArray] = useState(arrayGenerator(true, viewPort))\n  const [bubbleSortMode, setBubbleSortMode] = useState(0)\n  const [selectionSortMode, setSelectionSortMode] = useState(0)\n  const [insertionSortMode, setInsertionSortMode] = useState(0)\n  const [quickSortMode, setQuickSortMode] = useState(0)\n  return (\n    <div>\n      <Header\n        array={array}\n        device={viewPort}\n        onClick={{\n          setArray,\n          bubbleSortAnimation,\n          selectionSortAnimation,\n          insertionSortAnimation,\n          quickSortAnimation,\n          setBubbleSortMode,\n          setInsertionSortMode,\n          setSelectionSortMode,\n          setQuickSortMode,\n        }}\n        modes={{\n          bubbleSortMode,\n          insertionSortMode,\n          selectionSortMode,\n          quickSortMode,\n        }}\n      />\n      {isMobile ? (\n        <Visualizer\n          viewPort='mobile'\n          array={array}\n          modes={{\n            bubbleSortMode,\n            insertionSortMode,\n            selectionSortMode,\n            quickSortMode,\n          }}\n        />\n      ) : (\n        <Visualizer\n          viewPort='laptop'\n          array={array}\n          onClick={{\n            setArray,\n            setBubbleSortMode,\n            setInsertionSortMode,\n            setSelectionSortMode,\n            setQuickSortMode,\n          }}\n          modes={{\n            bubbleSortMode,\n            insertionSortMode,\n            selectionSortMode,\n            quickSortMode,\n          }}\n        />\n      )}\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}